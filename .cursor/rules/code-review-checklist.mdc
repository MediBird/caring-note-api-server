---
description: 코드 리뷰 시 확인해야 할 항목들의 종합적인 체크리스트입니다.
globs: 
alwaysApply: false
---
# 코드 리뷰 체크리스트

## 기본 사항
- [ ] 코드가 요구사항을 충족하는가?
- [ ] 코드가 설계 문서 및 아키텍처와 일치하는가?
- [ ] 코드가 기능적으로 정상 작동하는가?
- [ ] 코딩 컨벤션 및 스타일 가이드를 준수하는가?

## 보안
- [ ] 사용자 입력에 대한 유효성 검증이 적절히 구현되었는가?
- [ ] SQL 인젝션, XSS 등 보안 취약점에 대한 방어 코드가 있는가?
- [ ] 민감한 정보(비밀번호, 개인정보 등)가 로그에 노출되지 않는가?
- [ ] API 요청에 대한 인증 및 권한 검사가 적절히 구현되었는가?
- [ ] HTTPS를 사용하여 데이터를 암호화하여 전송하는가?
- [ ] 토큰 만료 및 갱신 메커니즘이 적절히 구현되었는가?

## 성능
- [ ] 데이터베이스 쿼리가 최적화되었는가? (인덱스 사용, N+1 문제 해결 등)
- [ ] 불필요한 데이터베이스 호출이나 API 호출을 최소화했는가?
- [ ] 대용량 데이터 처리 시 페이징이나 배치 처리를 활용하는가?
- [ ] 리소스 사용이 효율적인가? (메모리, CPU 등)
- [ ] 캐싱이 필요한 부분에 적절히 적용되었는가?

## 테스트
- [ ] 단위 테스트가 작성되었는가?
- [ ] 테스트 코드가 주요 비즈니스 로직과 엣지 케이스를 커버하는가?
- [ ] 통합 테스트가 필요한 경우 작성되었는가?
- [ ] 테스트 코드의 가독성과 유지보수성은 좋은가?
- [ ] 테스트 코드에서 Mock 객체가 적절히 사용되었는가?

## 가독성 및 유지보수성
- [ ] 변수, 메소드, 클래스 명이 명확하고 의미를 잘 표현하는가?
- [ ] 복잡한 로직에 주석이 적절히 추가되었는가?
- [ ] 코드의 중복이 최소화되었는가? (DRY 원칙)
- [ ] 메소드와 클래스가 단일 책임을 가지는가? (SRP)
- [ ] 코드가 모듈화되어 재사용이 용이한가?

## 확장성 및 유연성
- [ ] 코드가 변경에 유연하게 대응할 수 있는가? (OCP)
- [ ] 인터페이스를 통한 의존성 주입이 적절히 사용되었는가? (DIP)
- [ ] 향후 기능 추가나 변경이 용이한 구조인가?
- [ ] 의존성이 최소화되고 느슨한 결합을 유지하는가?

## 로깅 및 예외 처리
- [ ] 중요한 이벤트와 에러에 대한 로깅이 적절히 구현되었는가?
- [ ] 로그 레벨이 적절히 사용되었는가? (ERROR, WARN, INFO, DEBUG)
- [ ] 예외 처리가 적절히 구현되었는가?
- [ ] 사용자 정의 예외 클래스가 필요한 경우 적절히 구현되었는가?
- [ ] 외부 서비스 호출에 대한 예외 처리 및 폴백(fallback) 메커니즘이 구현되었는가?

## 트랜잭션 관리
- [ ] 트랜잭션 경계가 적절히 설정되었는가?
- [ ] 트랜잭션 전파 속성이 요구사항에 맞게 설정되었는가?
- [ ] 긴 트랜잭션을 분할하거나 최적화했는가?

## 동시성 및 스레드 안전성
- [ ] 공유 자원에 대한 동시 접근이 적절히 처리되었는가?
- [ ] 경쟁 상태(race condition)나 데드락(deadlock)의 가능성이 있는 코드가 없는가?
- [ ] 비동기 처리가 적절히 구현되었는가?

## 문서화
- [ ] API 문서(Swagger/OpenAPI)가 업데이트되었는가?
- [ ] README나 기술 문서가 필요한 경우 업데이트되었는가?
- [ ] 복잡한 알고리즘이나 비즈니스 로직에 대한 설명이 주석으로 추가되었는가?

## 배포 및 운영
- [ ] 환경별 설정이 적절히 분리되었는가?
- [ ] 모니터링 및 알림 설정이 적절히 구현되었는가?
- [ ] 배포 스크립트나 설정이 업데이트되었는가?
- [ ] 롤백 계획이 고려되었는가? 